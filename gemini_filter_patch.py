#!/usr/bin/env python3
"""
Gemini Duplicates Filter Patch for LiteLLM v1.70.0
–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–∫—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π gemini-pro-2.5, gemini-flash-2.5
"""

import os
import sys
import re
from typing import List

def apply_gemini_filter_patch():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–∞—Ç—á –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö Gemini –º–æ–¥–µ–ª–µ–π"""
    
    print("üöÄ Starting Gemini filter patch...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not os.getenv("LITELLM_FILTER_GEMINI_DUPLICATES"):
        print("‚ùå LITELLM_FILTER_GEMINI_DUPLICATES –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø–∞—Ç—á –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è")
        return False
    
    try:
        # –ù–∞–π—Ç–∏ –ø—É—Ç—å –∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É LiteLLM –≤ site-packages
        import site
        import litellm
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É –ø–∞–∫–µ—Ç—É
        litellm_path = os.path.dirname(litellm.__file__)
        proxy_server_path = os.path.join(litellm_path, "proxy", "proxy_server.py")
        
        print(f"üìÇ –ù–∞–π–¥–µ–Ω LiteLLM –≤: {litellm_path}")
        print(f"üìÑ –ü—Ä–∏–º–µ–Ω—è—é –ø–∞—Ç—á –∫: {proxy_server_path}")
        
        if not os.path.exists(proxy_server_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {proxy_server_path}")
            return False
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(proxy_server_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        filter_function = '''

def _filter_gemini_duplicates(all_models: List[dict]) -> List[dict]:
    """
    Filter out duplicate Gemini models that have:
    - deployment_id: null
    - db_model: null  
    - Model names: gemini-pro-2.5, gemini-flash-2.5
    
    These are automatically created duplicates that interfere with load balancing.
    """
    models_to_filter = ["gemini-pro-2.5", "gemini-flash-2.5"]
    filtered_models = []
    filtered_count = 0
    
    for model in all_models:
        model_name = model.get("model_name", "")
        deployment_id = model.get("deployment_id")
        db_model = model.get("db_model")
        
        # Filter out problematic duplicate models
        if (model_name in models_to_filter and 
            deployment_id is None and 
            db_model is None):
            filtered_count += 1
            continue
            
        filtered_models.append(model)
    
    if filtered_count > 0:
        verbose_proxy_logger.info(f"Filtered {filtered_count} duplicate Gemini models from /model/info")
    
    return filtered_models
'''
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ—É–Ω–∫—Ü–∏—è
        if '_filter_gemini_duplicates' in content:
            print("‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏—è _filter_gemini_duplicates —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")
        else:
            # –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ - –ø–µ—Ä–µ–¥ model_info_v1
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
            pattern = r'(@router\.get\(\s*"/model/info".*?\)\s*async def model_info_v1\()'
            match = re.search(pattern, content, re.DOTALL)
            
            if match:
                # –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º
                insert_position = match.start()
                content = content[:insert_position] + filter_function + '\n\n' + content[insert_position:]
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è _filter_gemini_duplicates")
            else:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
                insert_position = content.find('async def model_info_v1(')
                if insert_position != -1:
                    # –ù–∞–π—Ç–∏ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º
                    line_start = content.rfind('@router.get', 0, insert_position)
                    if line_start != -1:
                        content = content[:line_start] + filter_function + '\n\n' + content[line_start:]
                        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è _filter_gemini_duplicates (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)")
                    else:
                        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è model_info_v1")
                        return False
                else:
                    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è model_info_v1")
                    return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ model_info_v1
        # –ò—â–µ–º return {"data": all_models} –≤ —Ñ—É–Ω–∫—Ü–∏–∏ model_info_v1
        
        # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ model_info_v1
        func_start = content.find('async def model_info_v1(')
        if func_start == -1:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è model_info_v1 –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã–∑–æ–≤–∞")
            return False
        
        # –ù–∞–π–¥–µ–º –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ (—Å–ª–µ–¥—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞)
        next_func = content.find('\nasync def ', func_start + 1)
        next_def = content.find('\ndef ', func_start + 1)
        func_end = min(x for x in [next_func, next_def, len(content)] if x > func_start)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
        func_body = content[func_start:func_end]
        
        # –ò—â–µ–º return {"data": all_models} –≤ —Ç–µ–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
        return_pattern = r'return\s+\{\s*"data"\s*:\s*all_models\s*\}'
        
        if re.search(return_pattern, func_body):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –≤—ã–∑–æ–≤
            if 'all_models = _filter_gemini_duplicates(all_models)' not in func_body:
                # –ó–∞–º–µ–Ω—è–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–º content
                new_return = '''# Filter out duplicate Gemini models
    all_models = _filter_gemini_duplicates(all_models)
    
    return {"data": all_models}'''
                
                content = content[:func_start] + re.sub(
                    return_pattern,
                    new_return,
                    content[func_start:func_end]
                ) + content[func_end:]
                
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–∑–æ–≤ _filter_gemini_duplicates –≤ model_info_v1")
            else:
                print("‚ö†Ô∏è  –í—ã–∑–æ–≤ _filter_gemini_duplicates —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω return {'data': all_models} –≤ model_info_v1")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
            if 'return {' in func_body and '"data"' in func_body and 'all_models' in func_body:
                print("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π return, –Ω–æ –Ω–µ –º–æ–∂–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open(proxy_server_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("üéâ Gemini —Ñ–∏–ª—å—Ç—Ä –ø–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!")
        print("‚ú® –î—É–±–ª–∏—Ä—É—é—â–∏–µ –º–æ–¥–µ–ª–∏ gemini-pro-2.5 –∏ gemini-flash-2.5 –±—É–¥—É—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = apply_gemini_filter_patch()
    sys.exit(0 if success else 1) 